package <c:get select="$server/@rootPkg" />;

<c:userRegion>// Begin imports<c:initialCode>

import java.io.File;
import java.util.HashMap;

import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.servlet.DefaultServlet;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.util.resource.FileResource;
import org.eclipse.jetty.util.resource.PathResource;
import org.eclipse.jetty.util.resource.Resource;
import org.eclipse.jetty.util.resource.ResourceCollection;

<c:iterate select="$server/servlet" var="servlet" >
import <c:get select="$server/@servletPkg" />.<c:get select="$servlet/@servletJava" />;
</c:iterate>

</c:initialCode>// End imports</c:userRegion>

public class <c:get select="$server/@driver" /> implements Runnable {

		<c:userRegion>// Begin declarations<c:initialCode>

	private int port;
	private String resourcesDir;
	
	private Server server;
	private HashMap<String, String> parms = new HashMap<String, String>();
	public static <c:get select="$server/@driver" /> common;

		</c:initialCode>// End declarations</c:userRegion>
	
	public <c:get select="$server/@driver" />(int port, String resourcesDir) {
		this.port = port;
		this.resourcesDir = resourcesDir;
	}

	public void start() {
		<c:userRegion>// Begin start<c:initialCode>
		new Thread(this).start();
		common = this;
		</c:initialCode>// End start</c:userRegion>
	}
	
	public void stop() {
		<c:userRegion>// Begin stop<c:initialCode>
		try {
			server.stop();
			common = null;
		} catch (Exception e) {
			e.printStackTrace();
		}
		</c:initialCode>// End stop</c:userRegion>
	}
	
	public void run() {
		try {
			server = new Server();
	
			ServletContextHandler sHandler = defineServletContextHandler();
			server.setHandler(sHandler);

			HttpConfiguration config = new HttpConfiguration();
		    config.setRequestHeaderSize(65535);
		    ServerConnector http = new ServerConnector(server, new HttpConnectionFactory(config));
		    http.setPort(port);
		    server.setConnectors(new Connector[] {http});
		    
			server.start();
			server.join();
			
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private ServletContextHandler defineServletContextHandler() {
		ServletContextHandler handler = new ServletContextHandler(ServletContextHandler.SESSIONS);
		handler.setContextPath("/<c:get select="$server/@contextPath" />");
		ResourceCollection recoll = new ResourceCollection();
		Resource[] resource = new Resource[2]; 
		resource[0] = new <c:get select="$server/@classpathPath" />();
		resource[1] = new PathResource(new File(resourcesDir));
		recoll.setResources(resource);
		handler.setBaseResource(recoll);
		
<c:iterate select="$server/servlet" var="servlet" >
		handler.addServlet(<c:get select="$servlet/@servletJava" />.class, "/<c:get select="c:lower-case($servlet/@name)" />/*");
</c:iterate>		
		handler.addServlet(DefaultServlet.class, "/");

		for (String name: parms.keySet()) {
			handler.setInitParameter(name, parms.get(name));
		}

		return handler;
	}
	
	public void setInitParameter(String name, String value) {
		parms.put(name,  value);
	}
	
	public static void main(String[] args) {
		
		try {
		
			<c:userRegion>// Start server test<c:initialCode>
			
			<c:get select="$server/@driver" /> http = new <c:get select="$server/@driver" />(8080, "/file/system/root/resource/folder"); 

//			Set init parameters before starting
//			http.setInitParameter("parm.id", "value");

			http.start();
			
			// Sleep for 5 minutes and the stop. Generally you'd remve this code and 
			// instead call stop in a shutdown servlet.
						
			Thread.sleep(300000);
			http.stop();
			
			</c:initialCode>// End server test</c:userRegion>
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

}
